{{- $contract := . -}}
{{- $logger := (print $contract.ShortVar "Logger") -}}
{{- range $i, $event := .Events }}

type {{$contract.FullVar}}{{$event.CapsName}}Func func(
    {{$event.ParamDeclarations -}}
)

func ({{$contract.ShortVar}} *{{$contract.Class}}) Watch{{$event.CapsName}}(
	success {{$contract.FullVar}}{{$event.CapsName}}Func,
	fail func(err error) error,
	{{$event.IndexedFilterDeclarations -}}
) (subscription.EventSubscription, error) {
    errorChan := make(chan error)
    unsubscribeChan := make(chan struct{})

    // Delay which must be preserved before a new resubscription attempt.
    // There is no sense to resubscribe immediately after the fail of current
    // subscription because the publisher must have some time to recover.
    retryDelay := 5 * time.Second

    watch := func() {
    	failCallback := func(err error) error {
    		fail(err)
    		errorChan <- err // trigger resubscription signal
    		return err
    	}

    	subscription, err := {{$contract.ShortVar}}.subscribe{{$event.CapsName}}(
    	    success,
    	    failCallback,
    	    {{$event.IndexedFilters}}
    	)
    	if err != nil {
    		errorChan <- err // trigger resubscription signal
    		return
    	}

    	// wait for unsubscription signal
    	<-unsubscribeChan
    	subscription.Unsubscribe()
    }

    // trigger the resubscriber goroutine
    go func() {
    	go watch() // trigger first subscription

    	for {
    		select {
    		case <-errorChan:
    		    {{$logger}}.Warn(
                    "subscription to event {{$event.CapsName}} terminated with error; " +
                        "resubscription attempt will be performed after the retry delay",
                )
    			time.Sleep(retryDelay)
    			go watch()
    		case <-unsubscribeChan:
    			// shutdown the resubscriber goroutine on unsubscribe signal
    			return
    		}
    	}
    }()

    // closing the unsubscribeChan will trigger a unsubscribe signal and
    // run unsubscription for all subscription instances
    unsubscribeCallback := func() {
    	close(unsubscribeChan)
    }

    return subscription.NewEventSubscription(unsubscribeCallback), nil
}

func ({{$contract.ShortVar}} *{{$contract.Class}}) subscribe{{$event.CapsName}}(
	success {{$contract.FullVar}}{{$event.CapsName}}Func,
	fail func(err error) error,
	{{$event.IndexedFilterDeclarations -}}
) (subscription.EventSubscription, error) {
	eventChan := make(chan *abi.{{$contract.AbiClass}}{{$event.CapsName}})
	eventSubscription, err := {{$contract.ShortVar}}.contract.Watch{{$event.CapsName}}(
		nil,
		eventChan,
		{{$event.IndexedFilters}}
	)
	if err != nil {
		close(eventChan)
		return eventSubscription, fmt.Errorf(
			"error creating watch for {{$event.CapsName}} events: [%v]",
			err,
		)
	}

	var subscriptionMutex = &sync.Mutex{}

	go func() {
		for {
			select {
			case event, subscribed := <-eventChan:
				subscriptionMutex.Lock()
				// if eventChan has been closed, it means we have unsubscribed
				if !subscribed {
					subscriptionMutex.Unlock()
					return
				}
				success(
                    {{$event.ParamExtractors}}
				)
				subscriptionMutex.Unlock()
			case ee := <-eventSubscription.Err():
				fail(ee)
				return
			}
		}
	}()

	unsubscribeCallback := func() {
		subscriptionMutex.Lock()
		defer subscriptionMutex.Unlock()

		eventSubscription.Unsubscribe()
		close(eventChan)
	}

	return subscription.NewEventSubscription(unsubscribeCallback), nil
}

{{- end -}}
